# Generated by Django 4.2.23 on 2025-07-04 10:24

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('roles_permissions', '0001_initial'),
        ('accounts', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('employee_id', models.CharField(blank=True, help_text='Company employee ID', max_length=50, null=True, unique=True)),
                ('phone_number', models.CharField(blank=True, help_text='Phone number with country code', max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('date_of_birth', models.DateField(blank=True, help_text='Date of birth', null=True)),
                ('hire_date', models.DateField(blank=True, help_text='Date when the employee was hired', null=True)),
                ('termination_date', models.DateField(blank=True, help_text='Date when the employee was terminated (if applicable)', null=True)),
                ('job_title', models.CharField(blank=True, help_text='Current job title', max_length=100, null=True)),
                ('department', models.CharField(blank=True, help_text='Department or team', max_length=100, null=True)),
                ('address_line1', models.CharField(blank=True, max_length=255, null=True)),
                ('address_line2', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('country', models.CharField(blank=True, default='United States', max_length=100, null=True)),
                ('employment_status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('terminated', 'Terminated'), ('on_leave', 'On Leave'), ('suspended', 'Suspended')], default='active', help_text='Current employment status', max_length=20)),
                ('is_system_admin', models.BooleanField(default=False, help_text='Whether this user has system-wide admin privileges')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, help_text='IP address of last login', null=True)),
                ('password_changed_at', models.DateTimeField(blank=True, help_text='When the password was last changed', null=True)),
                ('must_change_password', models.BooleanField(default=True, help_text='Whether user must change password on next login')),
                ('two_factor_enabled', models.BooleanField(default=False, help_text='Whether two-factor authentication is enabled')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this account', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('manager', models.ForeignKey(blank=True, help_text='Direct manager/supervisor', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='direct_reports', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
                'ordering': ['last_name', 'first_name', 'username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserAccount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_primary', models.BooleanField(default=False, help_text="Whether this is the user's primary account")),
                ('is_active', models.BooleanField(default=True, help_text='Whether this account membership is active')),
                ('can_access_admin', models.BooleanField(default=False, help_text='Whether user can access admin features for this account')),
                ('onboarding_completed', models.BooleanField(default=False, help_text='Whether onboarding process is completed')),
                ('onboarding_completed_at', models.DateTimeField(blank=True, help_text='When onboarding was completed', null=True)),
                ('offboarding_started', models.BooleanField(default=False, help_text='Whether offboarding process has started')),
                ('offboarding_started_at', models.DateTimeField(blank=True, help_text='When offboarding was started', null=True)),
                ('offboarding_completed_at', models.DateTimeField(blank=True, help_text='When offboarding was completed', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this user account relationship')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.account')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this account membership', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_user_accounts', to=settings.AUTH_USER_MODEL)),
                ('role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='roles_permissions.role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Account',
                'verbose_name_plural': 'User Accounts',
                'db_table': 'user_accounts',
                'ordering': ['account__account_name', 'user__last_name', 'user__first_name'],
                'unique_together': {('user', 'account')},
            },
        ),
    ]
